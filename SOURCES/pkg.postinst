#!/bin/bash

#################
#### functions ##
#################

RESTART_NEEDED=""

function reset_passenger_userdata {
    local name=$1
    local valu=$2

    echo "TODO: reset userdata that has $name configured with a value is not already $valu"

    local PERL=/usr/local/cpanel/3rdparty/bin/perl
    local UPDATE_USERDATA='my ($y, $n, $v)=@ARGV;my $u="";my $apps=eval {Cpanel::JSON::LoadFile($y)}; if ($@) { warn $@; exit 0 } for my $app (keys %{$apps}) { if(!$apps->{$app}{$n} || $apps->{$app}{$n} ne $v) { $apps->{$app}{$n} = $v;if(!$u) { $u=$y;$u=~ s{/[^/]+$}{};$u=~s{/var/cpanel/userdata/}{}; } } } Cpanel::JSON::DumpFile($y, $apps);print $u'
    local UPDATE_INCLUDES='my $ch="";my $obj=Cpanel::Config::userdata::PassengerApps->new({user=>$ARGV[0]});my $apps=$obj->list_applications();for my $name (keys %{$apps}) {my $data=$apps->{$name};if ($data->{enabled}) {$obj->generate_apache_conf($name);$ch++;}}print $ch;'

    for appconf in $(ls /var/cpanel/userdata/*/applications.json); do
        REGEN_USER=$($PERL -MCpanel::JSON -e "$UPDATE_USERDATA" $appconf $name $valu)

        if [ ! -z "$REGEN_USER" ]; then
            MADE_CHANGES=$($PERL -MCpanel::Config::userdata::PassengerApps -e "$UPDATE_INCLUDES" $REGEN_USER)

            if [ ! -z "$MADE_CHANGES" ]; then
                RESTART_NEEDED=1

                if [ -x "/usr/local/cpanel/scripts/ea-nginx" ]; then
                    /usr/local/cpanel/scripts/ea-nginx config $REGEN_USER --no-reload
                fi
            fi
        fi
    done
}

function reset_passenger_setting {
    local name=$1
    local file=$2
    local valu=$3

    echo "Resetting $name setting to $valu"
    echo -n $valu > $file

    reset_passenger_userdata $name $valu
}

function verify_passenger_setting {
    local name=$1
    local have=$2

    echo "Verifying passenger setting for $name"

    if [ -s "/etc/cpanel/ea4/passenger.$name" ]; then
        local curr=$(cat /etc/cpanel/ea4/passenger.$name | tr -d '\n')
        if [ ! -x "$curr" ]; then
            echo "/etc/cpanel/ea4/passenger.$name’s value is not executable ($curr)";
            if [ "$have" != "" ]; then
                reset_passenger_setting $name /etc/cpanel/ea4/passenger.$name $have
            else
                local defaultpath=$(readlink /etc/cpanel/ea4/passenger.${name}.system-default)
                echo "Could not find $name locally. Passenger apps using it will not work until $defaultpath is installed!"

                if [ "$name" == "ruby" ]; then
                    echo "Passenger itself will not work until until $defaultpath is installed!"
                fi

                reset_passenger_setting $name /etc/cpanel/ea4/passenger.$name $defaultpath
            fi
        fi
    else
        local defaultpath=$(readlink /etc/cpanel/ea4/passenger.${name}.system-default)
        echo "$name is not configured for passenger, using default $defaultpath"
        if [ ! -x "$defaultpath" ]; then
            echo "Could not find $defaultpath locally. Passenger apps using it will not work until $defaultpath is installed!"

            if [ "$name" == "ruby" ]; then
                echo "Passenger itself will not work until until $defaultpath is installed!"
            fi
        fi

        reset_passenger_setting $name /etc/cpanel/ea4/passenger.$name $defaultpath
    fi
}

function verify_default {
    local name=$1
    local have=$2

    # if default does not even exist this will create it ($target will be empty)
    local target=$(readlink /etc/cpanel/ea4/passenger.${name}.system-default);
    if [ ! -x "$target" ]; then
        echo "Default $name, $target, is not executable"

        if [[ ! $have ]]; then
            echo " … no $name found on system, leaving currently invalid value in place"
        else
            echo " … updating to “$have”"
            ln -fs $have /etc/cpanel/ea4/passenger.${name}.system-default
        fi
    else
        echo "Default $name, $target, is ok"
    fi

    echo
}

#####################
#### actual script ##
#####################

default_ruby=$(find /usr/bin -name 'ruby*' -executable | sort -r | head -n 1)
default_python=$(find /usr/bin -name 'python*' -executable ! -name "*-config" ! -name "pythonw*" | sort -r | head -n 1)
default_nodejs=$(find /usr/bin -name 'node*' -executable | sort -r | head -n 1)

# 1. Verify defaults exist on system
verify_default ruby   $default_ruby

verify_default python $default_python

verify_default nodejs $default_nodejs

# 2. Verify settings exist on system
verify_passenger_setting ruby   $default_ruby

echo

verify_passenger_setting python $default_python

echo

verify_passenger_setting nodejs $default_nodejs

if [ ! -z "$RESTART_NEEDED" ]; then
    echo

    echo "Restarting so updates can take effect"

    /usr/local/cpanel/scripts/restartsrv_httpd --restart

    if [ -x "/usr/local/cpanel/scripts/ea-nginx" ]; then
        /usr/local/cpanel/scripts/ea-nginx reload
    fi
fi

exit 0
